// DLL_PUBLIC void DLL_ENTRY alDopplerFactor(ALfloat value) { short_.functions.alDopplerFactor(value); };
// DLL_PUBLIC void DLL_ENTRY alDopplerVelocity(ALfloat value) { short_.functions.alDopplerVelocity(value); };
// DLL_PUBLIC void DLL_ENTRY alSpeedOfSound(ALfloat value) { short_.functions.alSpeedOfSound(value); };
// DLL_PUBLIC void DLL_ENTRY alGetBooleanv(ALenum param, ALboolean *values) { short_.functions.alGetBooleanv(value) };
// DLL_PUBLIC void DLL_ENTRY alGetIntegerv(ALenum param, ALint *values) { short_.functions.alGetIntegerv(value) };
// DLL_PUBLIC void DLL_ENTRY alGetFloatv(ALenum param, ALfloat *values) { short_.functions.alGetFloatv(value) };
// DLL_PUBLIC void DLL_ENTRY alGetDoublev(ALenum param, ALdouble *values) { short_.functions.alGetDoublev(value) };
// DLL_PUBLIC ALboolean DLL_ENTRY alGetBoolean(ALenum param) { short_.functions.alGetBoolean(value) };
// DLL_PUBLIC ALint DLL_ENTRY alGetInteger(ALenum param) { short_.functions.alGetInteger(value) };
// DLL_PUBLIC ALfloat DLL_ENTRY alGetFloat(ALenum param) { short_.functions.alGetFloat(value) };
// DLL_PUBLIC ALdouble DLL_ENTRY alGetDouble(ALenum param) { short_.functions.alGetDouble(value) };
// DLL_PUBLIC void DLL_ENTRY alListenerfv(ALenum param, const ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alListeneri(ALenum param, ALint value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alListener3i(ALenum param, ALint value1, ALint value2, ALint value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alListeneriv(ALenum param, const ALint *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListenerf(ALenum param, ALfloat *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListener3f(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListenerfv(ALenum param, ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListeneri(ALenum param, ALint *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListener3i(ALenum param, ALint *value1, ALint *value2, ALint *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetListeneriv(ALenum param, ALint *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC ALboolean DLL_ENTRY alIsSource(ALuint source) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourcefv(ALuint source, ALenum param, const ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSource3i(ALuint source, ALenum param, ALint value1, ALint value2, ALint value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSourcef(ALuint source, ALenum param, ALfloat *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSource3f(ALuint source, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSourcefv(ALuint source, ALenum param, ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSourcei(ALuint source,  ALenum param, ALint *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSource3i(ALuint source, ALenum param, ALint *value1, ALint *value2, ALint *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetSourceiv(ALuint source,  ALenum param, ALint *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourcePlayv(ALsizei n, const ALuint *sources) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceStopv(ALsizei n, const ALuint *sources) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceRewindv(ALsizei n, const ALuint *sources) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourcePausev(ALsizei n, const ALuint *sources) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourcePlay(ALuint source) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceStop(ALuint source) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceRewind(ALuint source) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourcePause(ALuint source) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceQueueBuffers(ALuint source, ALsizei nb, const ALuint *buffers) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alSourceUnqueueBuffers(ALuint source, ALsizei nb, ALuint *buffers) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGenBuffers(ALsizei n, ALuint *buffers);
// DLL_PUBLIC void DLL_ENTRY alDeleteBuffers(ALsizei n, const ALuint *buffers) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC ALboolean DLL_ENTRY alIsBuffer(ALuint buffer) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBufferData(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBufferf(ALuint buffer, ALenum param, ALfloat value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBuffer3f(ALuint buffer, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBufferfv(ALuint buffer, ALenum param, const ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBufferi(ALuint buffer, ALenum param, ALint value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBuffer3i(ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alBufferiv(ALuint buffer, ALenum param, const ALint *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBufferf(ALuint buffer, ALenum param, ALfloat *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBuffer3f(ALuint buffer, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBufferfv(ALuint buffer, ALenum param, ALfloat *values) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBufferi(ALuint buffer, ALenum param, ALint *value) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBuffer3i(ALuint buffer, ALenum param, ALint *value1, ALint *value2, ALint *value3) { short_.functions.alDopplerFactor(value) };
// DLL_PUBLIC void DLL_ENTRY alGetBufferiv(ALuint buffer, ALenum param, ALint *values) { short_.functions.alDopplerFactor(value) };